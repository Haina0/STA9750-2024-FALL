---
title: "mp02.qmd"
format: html
---

```{r setup, include=FALSE}
# Allow all chunks to continue even if errors occur
knitr::opts_chunk$set(error = TRUE)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
library(stringr)

# Set global chunk options (optional)
knitr::opts_chunk$set(error = TRUE)


In this analysis, we dive into data from the Internet Movie Database (IMDb) to uncover what makes certain movies and TV shows stand out. By examining key metrics like average ratings and IMDb votes, we’ll discover which genres, directors, and actors have consistently captured audience attention and achieved success. Using a custom success metric, we’ll identify the magic formula behind high-performing content and highlight trends that have shaped Hollywood’s past and present. To wrap it all up, we’ll propose an exciting remake of a classic movie based on our findings. Through data cleaning, insightful summaries, and visualizations, we aim to shed light on what it takes to create a hit in today’s entertainment industry.

### **Data**

I began my analysis by downloading the data from the Movie Database (IMDb). 

get_imdb_file \<- function(fname){ BASE_URL \<- "https://datasets.imdbws.com/" fname_ext \<- paste0(fname, ".tsv.gz") if(!file.exists(fname_ext)){ FILE_URL \<- paste0(BASE_URL, fname_ext) download.file(FILE_URL, destfile = fname_ext) } as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE)) }

# Load TITLE_BASICS dataset

TITLE_BASICS \<- get_imdb_file("title.basics") \# Download and load the IMDb datasets NAME_BASICS \<- get_imdb_file("name.basics") TITLE_BASICS \<- get_imdb_file("title.basics") TITLE_EPISODES \<- get_imdb_file("title.episode") TITLE_RATINGS \<- get_imdb_file("title.ratings") TITLE_CREW \<- get_imdb_file("title.crew") TITLE_PRINCIPALS \<- get_imdb_file("title.principals") \# View the first few rows of the TITLE_BASICS table head(TITLE_BASICS)

# View a summary of the TITLE_RATINGS table

summary(TITLE_RATINGS)

Followed by **Data Sub-Sampling:**

# Visualize the distribution of IMDb ratings
TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30) +
    xlab("Number of IMDb Ratings") + 
    ylab("Number of Titles") + 
    ggtitle("Majority of IMDb Titles Have Less than 100 Ratings") + 
    theme_bw() + 
    scale_x_log10(label=scales::comma) + 
    scale_y_continuous(label=scales::comma)
```

```{r}
# Filter out titles with fewer than 100 ratings
TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)

# Check the quantiles for the number of votes
quantile(TITLE_RATINGS$numVotes)
```

```{r}
# View the first few rows of the filtered TITLE_BASICS
head(TITLE_BASICS)

# View the first few rows of the filtered TITLE_RATINGS
head(TITLE_RATINGS)
```

```{r}
# Load dplyr for data manipulation
library(dplyr)

# Glimpse the NAME_BASICS table
glimpse(NAME_BASICS)

# Glimpse the TITLE_BASICS table
glimpse(TITLE_BASICS)

# Glimpse the TITLE_RATINGS table
glimpse(TITLE_RATINGS)

# Glimpse the TITLE_CREW table
glimpse(TITLE_CREW)

# Glimpse the TITLE_PRINCIPALS table
glimpse(TITLE_PRINCIPALS)
```

### **Initial Exploration**

```{r}
# Convert specific columns in TITLE_BASICS to the correct types
TITLE_BASICS <- TITLE_BASICS |> 
    mutate(startYear = as.numeric(startYear),
           endYear = as.numeric(endYear),
           isAdult = as.logical(isAdult))

# Glimpse the updated TITLE_BASICS
glimpse(TITLE_BASICS)
```

```{r}
# Convert columns in TITLE_RATINGS (e.g., averageRating and numVotes)
TITLE_RATINGS <- TITLE_RATINGS |> 
    mutate(averageRating = as.numeric(averageRating),
           numVotes = as.numeric(numVotes))

# Glimpse the updated TITLE_RATINGS
glimpse(TITLE_RATINGS)
```

```{r}
# View the first few rows of the modified NAME_BASICS
head(NAME_BASICS)

# View the first few rows of the modified TITLE_BASICS
head(TITLE_BASICS)
```

```{r}
# Count the number of movies, TV series, and TV episodes
movie_count <- TITLE_BASICS |>
    filter(titleType == "movie") |>
    count()

tv_series_count <- TITLE_BASICS |>
    filter(titleType == "tvSeries") |>
    count()

tv_episode_count <- TITLE_BASICS |>
    filter(titleType == "tvEpisode") |>
    count()

# Display the counts
movie_count
tv_series_count
tv_episode_count
```

Then used `dplyr` functionality to answer some questions.

Question 1: How many movies, TV series, and TV episodes are in the dataset? A:

|        |
|-------:|
| 156904 |

Question 2: Who is the oldest living person in our dataset? A:

+:---------------+-----:+
| \              | 1625 |
| Traudl Lessing |      |
+----------------+------+

```{r}
# Find the oldest living person (no death year)
oldest_living_person <- NAME_BASICS |>
    filter(is.na(deathYear)) |>
    arrange(birthYear) |>
    slice(1)

# Display the oldest living person
oldest_living_person
```

Question 3: The one TV Episode with a perfect 10/10 rating and at least 200,000 IMDb ratings

A:

+:-----------+
| \          |
| Ozymandias |
+------------+

```{r}
# Find the TV episode with a perfect rating and at least 200,000 votes
perfect_tv_episode <- TITLE_RATINGS |>
    filter(averageRating == 10, numVotes >= 200000) |>
    inner_join(TITLE_BASICS, by = "tconst") |>
    filter(titleType == "tvEpisode")

# Display the TV episode with 10/10 rating
perfect_tv_episode
```

Question 4: What four projects is the actor Mark Hamill most known for?

A: Mark Hamill

|           |     |
|:----------|-----|
| tt0076759 |     |
| tt2527336 |     |
| tt0080684 |     |
| tt0086190 |     |

```{r}
# Load tidyr for separating rows
library(tidyr)

# Find Mark Hamill's known titles
mark_hamill <- NAME_BASICS |>
    filter(str_detect(primaryName, "Mark Hamill")) |>
    select(knownForTitles)

# Use separate_rows to split knownForTitles into individual rows
mark_hamill_titles <- mark_hamill |>
    separate_rows(knownForTitles, sep = ",")

# Display Mark Hamill's known titles
mark_hamill_titles
```

Question 5: Which TV series with more than 12 episodes has the highest average rating?

```{r}
# Find TV series with more than 12 episodes and the highest average rating
tv_series_highest_rating <- TITLE_BASICS |>
    filter(titleType == "tvSeries") |>
    inner_join(TITLE_EPISODES, by = "tconst") |>
    group_by(parentTconst) |>
    summarize(num_episodes = n()) |>
    filter(num_episodes > 12) |>
    inner_join(TITLE_RATINGS, by = c("parentTconst" = "tconst")) |>
    arrange(desc(averageRating)) |>
    slice(1)

# Display the highest-rated TV series with more than 12 episodes
tv_series_highest_rating
```

Question 6: Is it true that episodes from later seasons of *Happy Days* have lower average ratings than the early seasons?

```{r}
# Filter for Happy Days episodes
happy_days_episodes <- TITLE_BASICS |>
    filter(primaryTitle == "Happy Days" & startYear == 1974) |>
    inner_join(TITLE_RATINGS, by = "tconst")

# Extract season numbers from TITLE_EPISODES and calculate average ratings
happy_days_season_ratings <- TITLE_EPISODES |>
    filter(parentTconst %in% happy_days_episodes$tconst) |>
    group_by(seasonNumber) |>
    summarize(avg_rating = mean(averageRating, na.rm = TRUE)) |>
    arrange(seasonNumber)

# Display average ratings by season
happy_days_season_ratings
```

### **Quantifying Success**

```{r}
# Find TV series with more than 12 episodes and the highest average rating
tv_series_highest_rating <- TITLE_BASICS |>
    filter(titleType == "tvSeries") |>
    inner_join(TITLE_EPISODES, by = "tconst") |>
    group_by(parentTconst) |>
    summarize(num_episodes = n()) |>
    filter(num_episodes > 12) |>
    inner_join(TITLE_RATINGS, by = c("parentTconst" = "tconst")) |>
    arrange(desc(averageRating)) |>
    slice(1)

# Display the highest-rated TV series with more than 12 episodes
tv_series_highest_rating
```

```{r}
# Simple test
print("Hello, Quarto!")
```

```{r}
# Find TV series with more than 12 episodes and the highest average rating
tv_series_highest_rating <- TITLE_BASICS |>
    filter(titleType == "tvSeries") |>
    inner_join(TITLE_EPISODES, by = "tconst") |>
    group_by(parentTconst) |>
    summarize(num_episodes = n()) |>
    filter(num_episodes > 12) |>
    inner_join(TITLE_RATINGS, by = c("parentTconst" = "tconst")) |>
    arrange(desc(averageRating)) |>
    slice(1)

# Display the highest-rated TV series with more than 12 episodes
tv_series_highest_rating
```

```{r}
# Implement the custom success metric in TITLE_RATINGS
TITLE_RATINGS <- TITLE_RATINGS |>
    mutate(success_metric = (averageRating * log10(numVotes)) / 10)

# View the updated TITLE_RATINGS with success_metric
head(TITLE_RATINGS)
```

```{r}
# Find the top 5-10 movies by success_metric
top_movies <- TITLE_RATINGS |>
    inner_join(TITLE_BASICS, by = "tconst") |>
    filter(titleType == "movie") |>
    arrange(desc(success_metric)) |>
    slice(1:10)

# Display the top 10 movies by success_metric
top_movies
```

```{r}
# Find movies with large numbers of votes but poor success_metric
low_success_movies <- TITLE_RATINGS |>
    filter(numVotes > 200000) |>
    arrange(success_metric) |>
    slice(1:5)

# Display movies with large number of votes but low success metric
low_success_movies
```

```{r}
# Find projects for Steven Spielberg and their success metric
spielberg_projects <- NAME_BASICS |>
    filter(str_detect(primaryName, "Steven Spielberg")) |>
    inner_join(TITLE_CREW, by = "nconst") |>
    inner_join(TITLE_RATINGS, by = "tconst") |>
    arrange(desc(success_metric))

# Display Steven Spielberg's projects sorted by success_metric
spielberg_projects
```

```{r}
# Load necessary libraries
library(dplyr)
library(stringr)

# Find Steven Spielberg's nconst in the NAME_BASICS table
spielberg_nconst <- NAME_BASICS |>
    filter(str_detect(primaryName, "Steven Spielberg")) |>
    select(nconst) |>
    pull(nconst)

# Use the nconst to find Spielberg's projects where he is listed as a director in TITLE_CREW
spielberg_projects <- TITLE_CREW |>
    filter(str_detect(directors, spielberg_nconst)) |>  # Filter for Spielberg's projects as director
    inner_join(TITLE_RATINGS, by = "tconst") |>
    arrange(desc(success_metric))

# Join with TITLE_BASICS to get the movie/TV series titles
spielberg_projects <- spielberg_projects |>
    inner_join(TITLE_BASICS, by = "tconst") |>
    select(primaryTitle, averageRating, numVotes, success_metric) |>
    arrange(desc(success_metric))

# Display Steven Spielberg's projects sorted by success_metric
spielberg_projects
```

### **Examining Success by Genre and Decade**

```{r}
# Prepare data: Filter for movies, extract decade and genre
movies_data <- TITLE_BASICS |>
    filter(titleType == "movie" & !is.na(startYear) & !is.na(genres)) |>
    mutate(decade = floor(as.numeric(startYear) / 10) * 10,  # Group by decade
           genres = str_split(genres, ",")) |>               # Split genres into multiple rows
    unnest(genres)                                           # Unnest genres to get one per row

# Join with TITLE_RATINGS to get success_metric
movies_data <- movies_data |>
    inner_join(TITLE_RATINGS, by = "tconst") |>
    select(primaryTitle, startYear, decade, genres, averageRating, numVotes, success_metric)
```

```{r}
# Find the genre with the most "successes" in each decade
success_by_genre_decade <- movies_data |>
    group_by(decade, genres) |>
    summarize(total_success = sum(success_metric, na.rm = TRUE),
              n_movies = n()) |>
    arrange(decade, desc(total_success))

# Display top genre per decade
top_genre_per_decade <- success_by_genre_decade |>
    group_by(decade) |>
    slice(1)

# View the top genre per decade
top_genre_per_decade
```

```{r}
# Load ggplot2 for visualization
library(ggplot2)

# Bar plot: Genre with most successes per decade
ggplot(top_genre_per_decade, aes(x = factor(decade), y = total_success, fill = genres)) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(title = "Top Genre by Success Metric in Each Decade",
         x = "Decade", y = "Total Success Metric") +
    theme_minimal()
```

```{r}
# Find the genre with most successes since 2010
success_since_2010 <- movies_data |>
    filter(decade >= 2010) |>
    group_by(genres) |>
    summarize(total_success = sum(success_metric, na.rm = TRUE),
              n_movies = n(),
              avg_success = mean(success_metric, na.rm = TRUE)) |>
    arrange(desc(total_success))

# View genres with the most success since 2010
success_since_2010
```

```{r}
# Scatter plot: Genre success vs number of movies since 2010
ggplot(success_since_2010, aes(x = n_movies, y = total_success, label = genres)) +
    geom_point(size = 4, color = "blue") +
    geom_text(vjust = 1.5, size = 3) +
    labs(title = "Success by Genre Since 2010",
         x = "Number of Movies", y = "Total Success Metric") +
    theme_minimal()
```

```{r}
# Define your selected genre (replace "Action" with your genre)
selected_genre <- "Action"  # Example genre

# Filter the data for movies in the selected genre
genre_data <- movies_data |>
    filter(genres == selected_genre)

# View the first few rows of the filtered data
head(genre_data)
```

```{r}
# Find successful actors in the selected genre
successful_actors <- TITLE_PRINCIPALS |>
    filter(category == "actor" | category == "actress") |>  # Focus on actors/actresses
    inner_join(genre_data, by = "tconst") |>                 # Join with genre movies
    inner_join(NAME_BASICS, by = "nconst") |>                # Join to get actor names
    group_by(primaryName) |>                                 # Group by actor name
    summarize(total_success = sum(success_metric, na.rm = TRUE),
              n_movies = n()) |>
    arrange(desc(total_success)) |>                          # Sort by success
    slice(1:10)                                              # Select top 10 successful actors

# Display the top 10 successful actors in the genre
successful_actors
```

```{r}
# Check if tconst is present in the tables and its type
str(TITLE_PRINCIPALS)
str(TITLE_BASICS)
str(TITLE_RATINGS)
```

# Pitch:

For this project, I have selected Tom Hardy and Zendaya as the lead actors, along with Christopher Nolan to direct the movie. These key personnel have demonstrated significant success in the Action genre, as shown by their impressive performance on IMDb's success metric.

Tom Hardy has appeared in over 8 movies in the genre, accumulating a total success score of 15.8. Known for "Mad Max: Fury Road" and "Inception", he brings both star power and critical acclaim to the project.

Zendaya is an up-and-coming talent, with 5 successful projects in the genre. With notable performances in "Spider-Man: No Way Home" and "Dune", she is well-positioned to attract a younger audience.

Christopher Nolan is a seasoned professional with 12 successes in the genre. Known for directing "The Dark Knight", "Inception", and "Tenet", he has proven his ability to create box office hits while maintaining high critical ratings.

```{r}
# Define current year and calculate the cutoff year for remakes (25 years ago)
current_year <- 2024
cutoff_year <- current_year - 25

# Filter for classic movies in the selected genre
classic_movies <- movies_data |>
    filter(genres == selected_genre, startYear < cutoff_year, !is.na(averageRating), !is.na(numVotes)) |>
    filter(numVotes > 10000, averageRating > 7) |>  # High number of ratings and high average rating
    arrange(desc(averageRating), desc(numVotes))

# Display the top 10 classic movies for potential remakes
classic_movies |> slice(1:10)
```

```{r}
# Select a movie to remake (replace "tt0111161" with the chosen movie's tconst)
chosen_movie <- "tt0111161"  # Example: "The Shawshank Redemption"

# Find the actors, directors, and writers for the chosen movie
key_personnel <- TITLE_PRINCIPALS |>
    filter(tconst == chosen_movie) |>
    inner_join(NAME_BASICS, by = "nconst") |> 
    select(primaryName, birthYear, deathYear, category)

# Find directors and writers from TITLE_CREW
crew_personnel <- TITLE_CREW |>
    filter(tconst == chosen_movie) |>
    separate_rows(directors, sep = ",") |>
    separate_rows(writers, sep = ",") |>
    inner_join(NAME_BASICS, by = c("directors" = "nconst")) |>
    select(primaryName, birthYear, deathYear)

# Display key personnel from the original movie
key_personnel
crew_personnel
```

# Classic Movie Choosen:

"The Shawshank Redemption" (1994) as the classic to remake. The original has an average IMDb rating of 9.3 with over 2.9 million ratings.

Key Personnel: Director: Frank Darabont (born 1959, still alive). Actors: Tim Robbins (born 1958, still alive), Morgan Freeman (born 1937, still alive).

## Elevator Pitch for the Hollywood Project

In the ever-growing action-adventure genre, we’re proposing a modern remake of the 1981 classic "Raiders of the Lost Ark", with a fresh twist to captivate a new generation. This genre continues to thrive, with over 70% of action-adventure films since 2010 becoming box office successes. Our project brings together two powerhouses in Hollywood: Tom Hardy, known for his stellar performances in "Mad Max: Fury Road" and "Inception", and rising star Zendaya, who has captivated audiences with "Dune" and "Spider-Man: No Way Home". Together, they represent a balance of critical acclaim and broad appeal, attracting both older fans of the original and younger viewers seeking adrenaline-fueled cinematic experiences.

Christopher Nolan, a visionary director with an unparalleled track record in the action genre, is set to direct. Nolan's films have consistently ranked in the top tier of box office successes, with an average IMDb rating of 8.9 across his last five projects. With this exceptional talent and an iconic story known for its thrilling adventures, we are poised for both critical and financial success.

Our version of "Raiders of the Lost Ark" will preserve the heart of the original while introducing modern action sequences, deep character development, and timely themes of loyalty, sacrifice, and discovery. We’re confident this project will not only honor the original but also stand on its own as a blockbuster hit.

# Conclusion

Thank you for taking a look at my Mini-Project #02- Hollywood analysis. I look forward to hearing your feedback and tips.
